/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <viewsrg_all.srgi>
#include <scenesrg_all.srgi>

#define PIPELINE_HAS_PASS_SRG 0

struct VSInput
{
    float3 m_position : POSITION;
    uint m_instanceId : SV_InstanceID; // Needed for GPU instance

};
 
struct VSDepthOutput
{
    precise float4 m_position : SV_Position;
};

option bool o_meshInstancingIsEnabled = false;
rootconstant uint m_rootConstantInstanceDataOffset;

float4x4 GetObjectToWorldMatrix(uint instanceId)
{
    if(o_meshInstancingIsEnabled)
    {
        return SceneSrg::GetObjectToWorldMatrix(ViewSrg::m_instanceData[m_rootConstantInstanceDataOffset + instanceId]);
    }
    else
    {
        return SceneSrg::GetObjectToWorldMatrix(ObjectSrg::m_objectId);
    }
}

VSDepthOutput DepthPassVS(VSInput IN)
{
    VSDepthOutput OUT;
    float4x4 objectToWorld = GetObjectToWorldMatrix(IN.m_instanceId);
    float4 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0));
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    return OUT;
}




